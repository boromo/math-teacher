{"version":3,"sources":["assets/in-love.png","assets/sad.png","Game.js","hooks/input.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","timeoutID","useInput","initialValue","useState","value","setValue","reset","bind","onChange","event","target","getRandomEquation","operation","Math","random","result","ceil","a","b","results","Game","props","onFinish","steps","name","resultInput","React","useRef","bindResult","resetResult","state","updateState","equation","updateResult","useEffect","clearTimeout","setTimeout","current","focus","handleSubmit","e","parseInt","push","length","preventDefault","stopPropagation","className","src","sad","inLove","onSubmit","type","ref","renderGame","defaultSettings","App","settings","updateSettings","stepsInput","nameInput","bindSteps","resetSteps","bindName","resetName","updateGameStatus","console","log","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6258de50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/in-love.d033ee85.png\";","module.exports = __webpack_public_path__ + \"static/media/sad.8c0b4eb4.png\";","import React from \"react\";\nimport \"./Game.css\";\nimport { useInput } from './hooks/input';\nimport inLove from './assets/in-love.png';\nimport sad from './assets/sad.png';\nimport { getRandomEquation } from './utils';\n\nlet timeoutID;\nlet results = [];\n\nfunction Game(props) {\n  const { onFinish, steps = 5, name } = props;\n  const resultInput = React.useRef(null);\n  const { value:result, bind:bindResult, reset:resetResult } = useInput('');\n  const [state, updateState] = React.useState('game');\n  const [equation, updateResult] = React.useState(getRandomEquation());\n\n  React.useEffect(() => {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n    if (state === 'valid') {\n      resetResult();\n      timeoutID = setTimeout(() => {\n        updateState('game');\n        updateResult(getRandomEquation());\n      }, 1000)\n    }\n    if (state === 'invalid') {\n      timeoutID = setTimeout(() => {\n        updateState('game');\n      }, 1000)\n    }\n    if (resultInput && resultInput.current) {\n      resultInput.current.focus();\n    }\n  }, [state]);\n\n  const handleSubmit = e => {\n    if (parseInt(result, 10) !== parseInt(equation.result, 10)) {\n      updateState('invalid');\n    } else {\n      results.push(result);\n      if (results.length === steps) {\n        onFinish(results);\n        results = [];\n      } else {\n        updateState('valid');\n      }\n    }\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const renderGame = () => {\n    switch (state) {\n      case 'invalid':\n        return (\n          <div>\n            <h3>{name} pokusaj ponovno</h3>\n            <img className=\"emoji\" src={sad} />  \n          </div>\n        )\n      case 'valid':\n        return (\n          <div>\n            <h3>Bravo {name}</h3>\n            <img className=\"emoji\" src={inLove} />\n          </div>\n        )\n      case 'game':\n      default:\n        return (\n          <form onSubmit={handleSubmit} className=\"equation\">\n            <div className=\"elements\">\n              <div>{equation.a}</div>\n              <div>{equation.operation}</div>\n              <div>{equation.b}</div>\n              <div>=</div>\n              <div>\n                <input type=\"text\" className=\"resultInput\" {...bindResult} ref={resultInput}  />\n              </div>\n            </div>\n            <button>Provjeri</button>\n          </form>\n        );\n    }\n  }\n\n  return (\n    <div>\n      {renderGame()}\n    </div>\n  );\n}\n\nexport default Game;\n","import { useState } from 'react';\n\nexport const useInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(''),\n    bind: {\n      value,\n      onChange: event => {\n        setValue(event.target.value);\n      }\n    }\n  };\n};\n","\nexport function getRandomEquation() {\n  const operation = Math.random() > 0.5 ? \"+\" : \"-\";\n  let result = Math.ceil(Math.random() * 20);\n  let a = Math.ceil(Math.random() * result);\n  let b = result - a;\n  if (operation === \"-\") {\n    a = result;\n    b = Math.ceil(Math.random() * a);\n    result = a - b;\n  }\n  return {\n    result,\n    a,\n    b,\n    operation\n  };\n}","import React from 'react';\nimport './App.css';\nimport Game from './Game';\nimport { useInput } from './hooks/input';\n\nconst defaultSettings = { steps: 5, name: '', state: 'init' };\n\nfunction App() {\n  const [settings, updateSettings] = React.useState(defaultSettings);\n  const stepsInput = React.useRef(null);\n  const nameInput = React.useRef(null);\n  const { value: steps, bind: bindSteps, reset: resetSteps } = useInput('');\n  const { value: name, bind: bindName, reset: resetName } = useInput('');\n  const [status, updateGameStatus] = React.useState(false);\n\n  const handleGameFinish = result => {\n    console.log(result);\n    updateSettings(defaultSettings);\n    updateGameStatus(false);\n  };\n\n  const handleSubmit = (e) => {\n    updateSettings({name, steps: parseInt(steps, 10), state: 'ready'});\n    resetSteps();\n    resetName();\n    e.preventDefault();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {settings.state === 'ready' ? (\n          <Game onFinish={handleGameFinish} steps={settings.steps} name={settings.name} />\n        ) : (\n          <form onSubmit={handleSubmit} className=\"startGameForm\">\n            <input\n              type=\"text\"\n              placeholder=\"Ime natjecatelja\"\n              {...bindName}\n              ref={nameInput}\n            />\n            <input\n              type=\"number\"\n              placeholder=\"Broj pitanje\"\n              {...bindSteps}\n              ref={stepsInput}\n            />\n            <button>Start</button>\n          </form>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}